// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum Role {
  ORGANIZER
  ATTENDEE
  ADMIN
}

enum Payment_Method {
  DEBIT_CARD
  CREDIT_CARD
  MOBILE_WALLET
}

enum Payment_Status {
  PENDING
  CONFIRMED
}

enum Notification_Type {
  INFO
  WARNING
  ERROR
}

enum Notification_Status {
  READ
  UNREAD
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String?
  password      String
  role          Role           @default(ATTENDEE)
  verified      Boolean?       @default(false)
  events        Event[]
  posts         Post[]
  notifications Notification[]
  comments      Comment[]
  payments      Payment[]

  @@map("users")
}

model Event {
  id           String          @id @default(uuid())
  organizerId  String          @map("organizer_id")
  title        String
  description  String
  location     String
  image_url    String
  tickets_sold Int             @default(0)
  date         DateTime
  organizer    User            @relation(fields: [organizerId], references: [id])
  tickets      Ticket[]
  comments     Event_Comment[]

  @@map("events")
}

model Ticket {
  id               String    @id @default(uuid())
  eventId          String    @map("event_id")
  type             String
  price            Float
  existingQuantity Int       @map("existing_quantity")
  event            Event     @relation(fields: [eventId], references: [id])
  payments         Payment[]

  @@map("tickets")
}

model Payment {
  id         String         @id @default(uuid())
  userId     String         @map("user_id")
  ticketId   String         @map("ticket_id")
  amount     Float
  method     Payment_Method
  status     Payment_Status
  qr_code    String
  created_at DateTime       @default(now())
  ticket     Ticket         @relation(fields: [ticketId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@unique([userId, ticketId])
  @@map("payments")
}

model Notification {
  id      String              @id @default(uuid())
  userId  String              @map("user_id")
  message String
  type    Notification_Type
  status  Notification_Status @default(UNREAD)
  sentAt  DateTime            @map("sent_at")
  user    User                @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Post {
  id             String         @id @default(uuid())
  authorId       String         @map("author_id")
  title          String
  content        String
  featured_image String
  publishedAt    DateTime       @map("published_at")
  author         User           @relation(fields: [authorId], references: [id])
  comments       Post_Comment[]
  tags           Tag[]

  @@map("posts")
}

model Tag {
  id      String @id @default(uuid())
  postId  String @map("post_id")
  content String
  post    Post   @relation(fields: [postId], references: [id])

  @@map("tags")
}

model Comment {
  id             String          @id @default(uuid())
  userId         String          @map("user_id")
  title          String
  content        String
  commentedAt    DateTime        @map("commented_at")
  user           User            @relation(fields: [userId], references: [id])
  event_comments Event_Comment[]
  post_comments  Post_Comment[]

  @@map("comments")
}

model Event_Comment {
  id        String @id @default(uuid())
  eventId   String @map("event_id")
  commentId String @map("comment_id")

  event   Event   @relation(fields: [eventId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([eventId, commentId])
  @@map("event_comments")
}

model Post_Comment {
  id        String @id @default(uuid())
  postId    String @map("post_id")
  commentId String @map("comment_id")

  post    Post    @relation(fields: [postId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([postId, commentId])
  @@map("post_comments")
}
